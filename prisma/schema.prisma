generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Community Models
model ForumTag {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  posts ForumPost[]

  @@map("forum_tags")
}

model ForumPost {
  id          Int      @id @default(autoincrement())
  title       String
  body        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  // Relations
  tags      ForumTag[]
  createdBy User                @relation(fields: [createdById], references: [id], onDelete: Cascade)
  views     ForumPostView[]
  comments  ForumPostComment[]
  likes     ForumPostLike[]
  dislikes  ForumPostDislike[]
  featured  ForumFeaturedPost[]

  @@index([createdById])
  @@map("forum_posts")
}

model ForumFeaturedPost {
  id        Int      @id @default(autoincrement())
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@map("forum_featured_posts")
}

model ForumPostLike {
  id     Int    @id @default(autoincrement())
  postId Int
  userId String

  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
  @@index([postId])
  @@map("forum_post_likes")
}

model ForumPostDislike {
  id     Int    @id @default(autoincrement())
  postId Int
  userId String

  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
  @@index([postId])
  @@map("forum_post_dislikes")
}

model ForumPostView {
  id     Int    @id @default(autoincrement())
  postId Int
  userId String

  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
  @@index([postId])
  @@map("forum_post_views")
}

model ForumPostComment {
  id          Int      @id @default(autoincrement())
  postId      Int
  body        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdBy User      @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([createdById])
  @@map("forum_post_comments")
}

model Community {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  createdBy User              @relation(fields: [createdById], references: [id], onDelete: Cascade)
  members   CommunityMember[]

  @@index([createdById])
  @@map("communities")
}

model CommunityMember {
  id          Int    @id @default(autoincrement())
  communityId Int
  userId      String
  role        String

  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([communityId, userId])
  @@index([userId])
  @@index([communityId])
  @@map("community_members")
}

// Route Models
model SavedTrip {
  id          Int      @id @default(autoincrement())
  name        String
  origin      String
  destination String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  createdBy User @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([createdById])
  @@map("saved_trips")
}

model UserTrip {
  id          Int      @id @default(autoincrement())
  name        String
  origin      String
  destination String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  createdBy User @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([createdById])
  @@map("user_trips")
}

// Marketplace Models
model RewardCategory {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  rewards Reward[]

  @@map("reward_categories")
}

model Reward {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  points      Int
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    RewardCategory     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  redemptions RewardRedemption[]

  @@index([categoryId])
  @@map("rewards")
}

model RewardRedemption {
  id         Int      @id @default(autoincrement())
  rewardId   Int
  userId     String
  redeemedAt DateTime @default(now())

  reward Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([rewardId])
  @@map("reward_redemptions")
}

// Auth Models
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  rewardPoints  Int       @default(0)

  // Auth relations
  accounts Account[]
  sessions Session[]

  // Feature relations
  posts             ForumPost[]
  communities       Community[]
  communityMembers  CommunityMember[]
  comments          ForumPostComment[]
  likes             ForumPostLike[]
  dislikes          ForumPostDislike[]
  views             ForumPostView[]
  savedTrips        SavedTrip[]
  userTrips         UserTrip[]
  rewardRedemptions RewardRedemption[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
